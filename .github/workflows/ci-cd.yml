name: CI/CD Pipeline

on:
    push:
        branches:
            - main # main 브랜치에 푸시할 때 트리거
    pull_request:
        branches:
            - main # main 브랜치에 PR 생성 시 트리거

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v2
              with:
                submodules: true

            - name: Initialize and update submodules
              run: git submodule update --init --recursive

            - name: Set up Docker
              run: |
                  sudo apt-get update
                  sudo apt-get install docker-compose -y

            - name: Build and push Docker images
              env:
                REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
              run: |
                  echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
                  docker-compose -f docker-compose.yml build
                  docker-compose -f docker-compose.yml push

    deploy:
        runs-on: ubuntu-latest
        needs: build # build 작업이 완료된 후에 실행

        steps:
            - name: Checkout code
              uses: actions/checkout@v2
              with:
                submodules: true

            - name: Create SSH PEM file
              run: echo "${{ secrets.MY_PEM_FILE }}" > my-key.pem

            - name: Set permissions for PEM file
              run: chmod 400 my-key.pem

            - name: Copy docker-compose.yml to server
              run: |
                  scp -i my-key.pem -o StrictHostKeyChecking=no docker-compose.yml ubuntu@43.202.106.124:/home/ubuntu/
                  scp -i my-key.pem -o StrictHostKeyChecking=no ./frontend/Dockerfile ubuntu@43.202.106.124:/home/ubuntu/frontend
                  scp -i my-key.pem -o StrictHostKeyChecking=no ./backend/Dockerfile ubuntu@43.202.106.124:/home/ubuntu/backend
                  scp -i my-key.pem -o StrictHostKeyChecking=no ./nginx/Dockerfile ubuntu@43.202.106.124:/home/ubuntu/nginx


            - name: Deploy to server
              env:
                    DB_USER: ${{ secrets.DB_USER }}
                    DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
                    JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
                    JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
                    GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
                    GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
                    GOOGLE_REDIRECT_URL: ${{ secrets.GOOGLE_REDIRECT_URL }}
                    HEALPER_CLIENT_URL: ${{ secrets.HEALPER_CLIENT_URL }}
                    GOOGLE_TOKEN_URL: ${{ secrets.GOOGLE_TOKEN_URL }}
                    GOOGLE_USERINFO_URL: ${{ secrets.GOOGLE_USERINFO_URL }}
                    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    AWS_REGION: ${{ secrets.AWS_REGION }}
                    AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
              run: |
                  ssh -i my-key.pem -o StrictHostKeyChecking=no ubuntu@43.202.106.124 << 'EOF'
                      # SSL 인증서 파일 생성
                      echo "${{ secrets.FULL_CHAIN }}" | sudo tee /etc/letsencrypt/live/www.healper.shop/fullchain.pem > /dev/null
                      sudo chmod 400 /etc/letsencrypt/live/www.healper.shop/fullchain.pem
                      echo "${{ secrets.PRIV_KEY }}" | sudo tee /etc/letsencrypt/live/www.healper.shop/privkey.pem > /dev/null
                      sudo chmod 400 /etc/letsencrypt/live/www.healper.shop/privkey.pem

                      # Nginx 설정 파일 복사
                      # (여기에 Nginx 설정 파일 복사 명령어 추가)

                      # Pull 최신 Docker 이미지
                      sudo docker-compose -f /home/ubuntu/docker-compose.yml pull
                      
                      # 컨테이너 재시작
                      sudo docker-compose -f /home/ubuntu/docker-compose.yml up -d

                      # 로그 남기기
                      sudo docker-compose -f /home/ubuntu/docker-compose.yml logs
                  EOF

