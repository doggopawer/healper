name: CI/CD Pipeline

on:
    push:
        branches:
            - main # main 브랜치에 푸시할 때 트리거
    pull_request:
        branches:
            - main # main 브랜치에 PR 생성 시 트리거

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v2
              with:
                submodules: true

            - name: Initialize and update submodules
              run: git submodule update --init --recursive

            - name: Set up Docker
              run: |
                  sudo apt-get update
                  sudo apt-get install docker-compose -y

            - name: Create .env file
              run: |
                  echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" > frontend/.env
                  echo "DB_USER=${{ secrets.DB_USER }}" > backend/.env
                  echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> backend/.env
                  echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> backend/.env
                  echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}" >> backend/.env
                  echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> backend/.env
                  echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> backend/.env
                  echo "GOOGLE_REDIRECT_URL=${{ secrets.GOOGLE_REDIRECT_URL }}" >> backend/.env
                  echo "HEALPER_CLIENT_URL=${{ secrets.HEALPER_CLIENT_URL }}" >> backend/.env
                  echo "GOOGLE_TOKEN_URL=${{ secrets.GOOGLE_TOKEN_URL }}" >> backend/.env
                  echo "GOOGLE_USERINFO_URL=${{ secrets.GOOGLE_USERINFO_URL }}" >> backend/.env
                  echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> backend/.env
                  echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> backend/.env
                  echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> backend/.env
                  echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> backend/.env
                  echo "APPLE_SERVICE_ID=${{ secrets.APPLE_SERVICE_ID }}" >> backend/.env
                  echo "APPLE_PRIVATE_KEY_ID=${{ secrets.APPLE_PRIVATE_KEY_ID }}" >> backend/.env
                  echo "APPLE_REDIRECT_URL=${{ secrets.APPLE_REDIRECT_URL }}" >> backend/.env
                  echo "APPLE_PRIVATE_KEY=${{ secrets.APPLE_PRIVATE_KEY }}" >> backend/.env
                  echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> backend/.env
                  echo "${{ secrets.APPLE_PRIVATE_KEY }}" > "backend/${{ secrets.APPLE_PRIVATE_KEY_FILE_NAME }}"

            - name: Display .env file contents
              run: |
                  echo "Contents of frontend/.env:"
                  cat frontend/.env
                  echo "Contents of backend/.env:"
                  cat backend/.env
      
            - name: Build and push Docker images
              env:
                REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
              run: |
                  echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
                  docker-compose -f docker-compose.yml build
                  docker-compose -f docker-compose.yml push

    deploy:
        runs-on: ubuntu-latest
        needs: build # build 작업이 완료된 후에 실행

        steps:
            - name: Checkout code
              uses: actions/checkout@v2
              with:
                submodules: true

            - name: Create SSH PEM file
              run: echo "${{ secrets.MY_PEM_FILE }}" > my-key.pem

            - name: Set permissions for PEM file
              run: chmod 400 my-key.pem

            - name: Copy docker-compose.yml to server
              run: |
                  scp -i my-key.pem -o StrictHostKeyChecking=no docker-compose.yml ubuntu@43.202.106.124:/home/ubuntu/
                  scp -i my-key.pem -o StrictHostKeyChecking=no ./frontend/Dockerfile ubuntu@43.202.106.124:/home/ubuntu/frontend
                  scp -i my-key.pem -o StrictHostKeyChecking=no ./backend/Dockerfile ubuntu@43.202.106.124:/home/ubuntu/backend
                  scp -i my-key.pem -o StrictHostKeyChecking=no ./nginx/Dockerfile ubuntu@43.202.106.124:/home/ubuntu/nginx


            - name: Deploy to server
              run: |
                  ssh -i my-key.pem -o StrictHostKeyChecking=no ubuntu@43.202.106.124 << 'EOF'
                      # 최신 Docker 이미지 Pull
                      sudo docker-compose pull
                      # 컨테이너 중지
                      sudo docker-compose down
                      # 컨테이너 재시작
                      sudo docker-compose up -d
                      # 로그 남기기
                      sudo docker-compose logs
                  EOF

